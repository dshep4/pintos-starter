@c Local settings

@set coursenumber COS 450
@set localpintostarpath /usr/class/cos450/pintos/pintos.tar.gz
@set localpintoshttppath http://@/people.usm.maine.edu/@/houser/@/cos450/@/pintos.@/tar.gz
@set localpintosbindir /usr/class/cos450/pintos/bin
@set localpintosgit ssh://linux.cs.usm.maine.edu/usr/class/cos450/pintos.git

@set recommendgit
@clear recommendcvs
@set recommendvnc
@clear recommendcygwin

@macro localmachines{}
The COS 450 ``officially supported'' Pintos development machines are the Linux
machines in the Scince Building managed by the CS Department, as described on
the @uref{http://usm.maine.edu/cos/unix-lab-guide, ,
CS department webpage}.
@end macro

@macro localpathsetup{}
Under @command{bash}, USM's login shell, you can do so
with this command:
@example
export PATH=@value{localpintosbindir}:$PATH
@end example
@noindent
It is a good idea to add this line to the @file{.basshrc} file
in your home directory.  Otherwise, you'll have to type it every time
you log in.
@end macro

@macro localcrossbuild{}
Watch the commands executed during the build.  On the Linux machines,
the ordinary system tools are used.
@end macro

@macro localhonorcodepolicy{}
In the context of USM's COS 450 course, please respect the spirit
and the letter of the honor code by refraining from reading any homework
solutions available online or elsewhere.  Reading the source code for
other operating system kernels, such as Linux or FreeBSD, is allowed,
but do not copy code from them literally.  Please cite the code that
inspired your own in your design documentation.
@end macro

@macro localcredits{}
Local changes for Computer Science at the University of Southern Maine
by Stephen Houser @email{houser@@usm.maine.edu}.
@end macro

@macro localcvspolicy{}
Instead, we recommend integrating your team's changes early and often,
using a source code control system such as GIT (@pxref{GIT}).
This is less likely to produce surprises, because everyone can see
everyone else's code as it is written, instead of just when it is
finished.  These systems also make it possible to review changes and,
when a change introduces a bug, drop back to working versions of code.
@end macro

@macro localcodingstandards{}
All of you should have taken a class like COS 160, so we expect you to be
familiar with some set of coding standards such as
@uref{http://people.usm.maine.edu/houser/cos450,
, USM CS Coding Standards}. Even if you've taken COS 160, we recommend
reviewing that document.  We expect code at the ``Peer-Review Quality''
level described there.
@end macro

@macro localdevelopmenttools{}
@c Descriptions of additional, local development tools can be inserted here
@end macro

@macro localsubmission{}
The source code archive should be a @code{tar.gz} file. It should be
named exactly @file{project0.tar.gz} where ``0'' is replaced with the
project number (1, 2, 3, or 4).

The design document should be a copy of the correct template with all
sections completed. It should be named exactly @file{project0.txt},
where ``0'' is replaced with the project number (1, 2, 3, or 4).

@enumerate
@item @code{make clean} in your @file{pintos/src} directory. Do not submit any compiled, object, or binary files.
@item @code{tar czvf project0.tar.gz *} in your @file{pintos/src} directory.
(substitute the project number for 0)
@item @code{submit} your project with
@itemize @minus
@item Course: @code{cos450}
@item Assignment: @code{project0}
(substitute the project number for 0)
@item Files: @code{project0.tar.gz project0.txt}
(only submit the tar.gz archive and your design document)
@end itemize
@end enumerate

Following these instructions ensures that we can use scripts to
extract, build, and grade your project. The penalty for violating the
instructions is a 10 point deduction; we will give you two warnings
where you can resubmit your project.

@end macro

